/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ChirpCity, ChirpCityInterface } from "../ChirpCity";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Chirped",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "chirp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "chirps",
    outputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106e8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806304efe1a61461003b578063b20d10e514610057575b600080fd5b610055600480360381019061005091906103fe565b610089565b005b610071600480360381019061006c9190610481565b6101f6565b60405161008093929190610597565b60405180910390f35b61009360006102c8565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506001600061011660006102de565b815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190805190602001906101919291906102ec565b509050503373ffffffffffffffffffffffffffffffffffffffff167f361a416accac4a57d7ea712ae109ab084e4b50beae6221eb90ff5be214a2652b6101d760006102de565b4285856040516101ea9493929190610611565b60405180910390a25050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201805461024590610680565b80601f016020809104026020016040519081016040528092919081815260200182805461027190610680565b80156102be5780601f10610293576101008083540402835291602001916102be565b820191906000526020600020905b8154815290600101906020018083116102a157829003601f168201915b5050505050905083565b6001816000016000828254019250508190555050565b600081600001549050919050565b8280546102f890610680565b90600052602060002090601f01602090048101928261031a5760008555610361565b82601f1061033357805160ff1916838001178555610361565b82800160010185558215610361579182015b82811115610360578251825591602001919060010190610345565b5b50905061036e9190610372565b5090565b5b8082111561038b576000816000905550600101610373565b5090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126103be576103bd610399565b5b8235905067ffffffffffffffff8111156103db576103da61039e565b5b6020830191508360018202830111156103f7576103f66103a3565b5b9250929050565b600080602083850312156104155761041461038f565b5b600083013567ffffffffffffffff81111561043357610432610394565b5b61043f858286016103a8565b92509250509250929050565b6000819050919050565b61045e8161044b565b811461046957600080fd5b50565b60008135905061047b81610455565b92915050565b6000602082840312156104975761049661038f565b5b60006104a58482850161046c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104d9826104ae565b9050919050565b6104e9816104ce565b82525050565b6104f88161044b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561053857808201518184015260208101905061051d565b83811115610547576000848401525b50505050565b6000601f19601f8301169050919050565b6000610569826104fe565b6105738185610509565b935061058381856020860161051a565b61058c8161054d565b840191505092915050565b60006060820190506105ac60008301866104e0565b6105b960208301856104ef565b81810360408301526105cb818461055e565b9050949350505050565b82818337600083830152505050565b60006105f08385610509565b93506105fd8385846105d5565b6106068361054d565b840190509392505050565b600060608201905061062660008301876104ef565b61063360208301866104ef565b81810360408301526106468184866105e4565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061069857607f821691505b602082108114156106ac576106ab610651565b5b5091905056fea26469706673582212209b422dd2263d0ed0863949300116111c5a0b4b9d197d283df1b6e9b8ed9880ef64736f6c63430008090033";

type ChirpCityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChirpCityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChirpCity__factory extends ContractFactory {
  constructor(...args: ChirpCityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChirpCity> {
    return super.deploy(overrides || {}) as Promise<ChirpCity>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ChirpCity {
    return super.attach(address) as ChirpCity;
  }
  connect(signer: Signer): ChirpCity__factory {
    return super.connect(signer) as ChirpCity__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChirpCityInterface {
    return new utils.Interface(_abi) as ChirpCityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChirpCity {
    return new Contract(address, _abi, signerOrProvider) as ChirpCity;
  }
}
