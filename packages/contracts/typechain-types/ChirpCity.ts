/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ChirpCityInterface extends utils.Interface {
  functions: {
    "chirp(string,uint256,address[])": FunctionFragment;
    "messages(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "chirp",
    values: [string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "chirp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;

  events: {
    "ChirpCityMention(address,uint256)": EventFragment;
    "ChirpCityMessage(address,uint256)": EventFragment;
    "ChirpCityReply(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChirpCityMention"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChirpCityMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChirpCityReply"): EventFragment;
}

export type ChirpCityMentionEvent = TypedEvent<
  [string, BigNumber],
  { to: string; id: BigNumber }
>;

export type ChirpCityMentionEventFilter =
  TypedEventFilter<ChirpCityMentionEvent>;

export type ChirpCityMessageEvent = TypedEvent<
  [string, BigNumber],
  { from: string; id: BigNumber }
>;

export type ChirpCityMessageEventFilter =
  TypedEventFilter<ChirpCityMessageEvent>;

export type ChirpCityReplyEvent = TypedEvent<
  [string, BigNumber],
  { to: string; id: BigNumber }
>;

export type ChirpCityReplyEventFilter = TypedEventFilter<ChirpCityReplyEvent>;

export interface ChirpCity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChirpCityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chirp(
      body: string,
      parentId: BigNumberish,
      mentions: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    messages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        timestamp: BigNumber;
        parentId: BigNumber;
        from: string;
        body: string;
      }
    >;
  };

  chirp(
    body: string,
    parentId: BigNumberish,
    mentions: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  messages(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      timestamp: BigNumber;
      parentId: BigNumber;
      from: string;
      body: string;
    }
  >;

  callStatic: {
    chirp(
      body: string,
      parentId: BigNumberish,
      mentions: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    messages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        timestamp: BigNumber;
        parentId: BigNumber;
        from: string;
        body: string;
      }
    >;
  };

  filters: {
    "ChirpCityMention(address,uint256)"(
      to?: string | null,
      id?: null
    ): ChirpCityMentionEventFilter;
    ChirpCityMention(
      to?: string | null,
      id?: null
    ): ChirpCityMentionEventFilter;

    "ChirpCityMessage(address,uint256)"(
      from?: string | null,
      id?: null
    ): ChirpCityMessageEventFilter;
    ChirpCityMessage(
      from?: string | null,
      id?: null
    ): ChirpCityMessageEventFilter;

    "ChirpCityReply(address,uint256)"(
      to?: string | null,
      id?: null
    ): ChirpCityReplyEventFilter;
    ChirpCityReply(to?: string | null, id?: null): ChirpCityReplyEventFilter;
  };

  estimateGas: {
    chirp(
      body: string,
      parentId: BigNumberish,
      mentions: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    messages(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    chirp(
      body: string,
      parentId: BigNumberish,
      mentions: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    messages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
